one chess idea construction (Thanh notes)


common conventions
# players with their name, color of their pieces and eaten pieces

# using standard algebraic notation 1-8; a-h from white players view (as log, in the background computable validmoves)
# figures have name b=bishop, r=rook, n=knight, k=king, q=queen, p=pawns
# example: white has lower case; black has UPPER CASE or has an attribute
# example, pawns move a2 a3; knight: Nb2 c6

actions
# no save.(), help.()
# maybe new.(), quit.()						->hidden copy of the intial board, which is untouched
# table will be build new after every turn			->so, is a log necessary?
# every subclass has his own movement
# if a piece of the opponent is removed like 'd5 xc4'

special moves
# castling the king (kingside 0-0/queenside 0-0-0): moves the king 2 squares and one of the rook at the same time to his side
#					1. must be the kings first move
#					2. rooks first move
#					3. move not possible in check situation or going into a check situation
#					4. not possible castling through checks
#					5. no pieces between

# pawn: en passant (only possible, if and only if the opponents pawn moves 2 squares forward and is right/left 
#			of your pawn before and the en passant follows; no turns in between) Notation: e.p.
# pawn promotion(pawn can only capture a pawn and only one pawn at once)

notation order
# 'figure''capture''position''check/checkmate'


figure with special property:
# rook, king and pawn ->first move already made? if not: castling; moving over 2 squares possible
# pawn: legal move diagonally only by capturing opponents piece
# knight: can jump over pieces

classes:
# enum PieceType
# enum PieceColor
# struct Piece
# class Square
# class Board{
	private Square[][] squareSet;
 	public Piece[][] pieceSet { get; set; }
 	public Board Clone() { ... }
	}
# class Move
# class Game


# does the color of the squares matter, if we know the exact position and the movement behaviour of the pieces?


Output version 1(from assignment):
[BT] [BN] [BB] [BQ] [BK] [BB] [BN] [BT]
[BP] [BP] [BP] [BP] [BP] [BP] [BP] [BP]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[WP] [WP] [WP] [WP] [WP] [WP] [WP] [WP]
[WT] [WN] [WB] [WQ] [WK] [WB] [WN] [WT]

Output version 2:
    a   b   c   d   e   f   g   h  
  +---+---+---+---+---+---+---+---+
8 | R | N | B | Q | K | B | N | R | 8
  +---+---+---+---+---+---+---+---+
7 | P | P | P | P | P | P | P | P | 7
  +---+---+---+---+---+---+---+---+
6 |   |   |   |   |   |   |   |   | 6
  +---+---+---+---+---+---+---+---+
5 |   |   |   |   |   |   |   |   | 5
  +---+---+---+---+---+---+---+---+
4 |   |   |   |   |   |   |   |   | 4
  +---+---+---+---+---+---+---+---+
3 |   |   |   |   |   |   |   |   | 3
  +---+---+---+---+---+---+---+---+
2 | p | p | p | p | p | p | p | p | 2
  +---+---+---+---+---+---+---+---+
1 | r | n | b | q | k | b | n | r | 1
  +---+---+---+---+---+---+---+---+
    a   b   c   d   e   f   g   h  